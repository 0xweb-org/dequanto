import { EVM } from '@dequanto/evm/evm';
import alot from 'alot';

UTest({
    async 'parse the bytecode of a proxy contract' () {
        let bytecode = '0x608060405234801561001057600080fd5b50604051602080610b2983398101806040528101908080519060200190929190505050808060405180807f6f72672e7a657070656c696e6f732e70726f78792e696d706c656d656e74617481526020017f696f6e000000000000000000000000000000000000000000000000000000000081525060230190506040518091039020600019167f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3600102600019161415156100c657fe5b6100de81610169640100000000026401000000009004565b5060405180807f6f72672e7a657070656c696e6f732e70726f78792e61646d696e000000000000815250601a0190506040518091039020600019167f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b6001026000191614151561014a57fe5b6101623361024e640100000000026401000000009004565b5050610290565b60006101878261027d6401000000000261084b176401000000009004565b1515610221576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b8152602001807f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f81526020017f6e20746f2061206e6f6e2d636f6e74726163742061646472657373000000000081525060400191505060405180910390fd5b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c360010290508181555050565b60007f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b60010290508181555050565b600080823b905060008111915050919050565b61088a8061029f6000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633659cfe6146100775780634f1ef286146100ba5780635c60da1b146101085780638f2839701461015f578063f851a440146101a2575b6100756101f9565b005b34801561008357600080fd5b506100b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610213565b005b610106600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001919091929391929390505050610268565b005b34801561011457600080fd5b5061011d610308565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561016b57600080fd5b506101a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610360565b005b3480156101ae57600080fd5b506101b761051e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610201610576565b61021161020c610651565b610682565b565b61021b6106a8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561025c57610257816106d9565b610265565b6102646101f9565b5b50565b6102706106a8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102fa576102ac836106d9565b3073ffffffffffffffffffffffffffffffffffffffff163483836040518083838082843782019150509250505060006040518083038185875af19250505015156102f557600080fd5b610303565b6103026101f9565b5b505050565b60006103126106a8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156103545761034d610651565b905061035d565b61035c6101f9565b5b90565b6103686106a8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561051257600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610466576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001807f43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f81526020017f787920746f20746865207a65726f20616464726573730000000000000000000081525060400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61048f6106a8565b82604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a161050d81610748565b61051b565b61051a6101f9565b5b50565b60006105286106a8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561056a576105636106a8565b9050610573565b6105726101f9565b5b90565b61057e6106a8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610647576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e20667281526020017f6f6d207468652070726f78792061646d696e000000000000000000000000000081525060400191505060405180910390fd5b61064f610777565b565b6000807f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c36001029050805491505090565b3660008037600080366000845af43d6000803e80600081146106a3573d6000f35b3d6000fd5b6000807f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b6001029050805491505090565b6106e281610779565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60007f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b60010290508181555050565b565b60006107848261084b565b151561081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b8152602001807f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f81526020017f6e20746f2061206e6f6e2d636f6e74726163742061646472657373000000000081525060400191505060405180910390fd5b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c360010290508181555050565b600080823b9050600081119150509190505600a165627a7a72305820a4a547cfc7202c5acaaae74d428e988bc62ad5024eb0165532d3a8f91db4ed2400290000000000000000000000000882477e7895bdc5cea7cb1552ed914ab157fe56';
        let evm = new EVM(bytecode);
        let abi = await evm.getAbi();

        let upgradeTo = abi.find(x => x.name === 'upgradeTo');
        has_(upgradeTo, {
            name: 'upgradeTo',
            inputs: [ { name: '', type: 'address' } ],
            outputs: [],
            type: 'function'
        });

        let implementation = abi.find(x => x.name === 'implementation');
        has_(implementation, {
            name: 'implementation',
            inputs: [],
            outputs: [],
            type: 'function',
            stateMutability: 'view',
        });

        let upgraded = abi.find(x => x.name === 'Upgraded');
        has_(upgraded, {
            name: 'Upgraded',
            inputs: [ { name: '', type: 'address' } ],
            outputs: [],
            type: 'event'
        });

        let isInterface = await evm.checkInterfaceOf([
            'upgradeTo(address)',
            'implementation()',
        ]);
        eq_(isInterface.ok, true);
    },
    async 'parse Counter.sol bytecode (raw and optimized)' () {
        // fixtures/contracts/Counter.sol
        // playground https://www.evm.codes/playground?fork=merge
        let bytecodeRaw = '0x608060405234801561001057600080fd5b50610298806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806306661abd1461005c578063371303c01461007a57806360fe47b1146100845780636d4ce63c146100a0578063b3bcfa82146100be575b600080fd5b6100646100c8565b6040516100719190610168565b60405180910390f35b6100826100ce565b005b61009e6004803603810190610099919061012c565b6100e9565b005b6100a86100f3565b6040516100b59190610168565b60405180910390f35b6100c66100fc565b005b60005481565b60016000808282546100e09190610183565b92505081905550565b8060008190555050565b60008054905090565b600160008082825461010e91906101d9565b92505081905550565b6000813590506101268161024b565b92915050565b60006020828403121561014257610141610246565b5b600061015084828501610117565b91505092915050565b6101628161020d565b82525050565b600060208201905061017d6000830184610159565b92915050565b600061018e8261020d565b91506101998361020d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156101ce576101cd610217565b5b828201905092915050565b60006101e48261020d565b91506101ef8361020d565b92508282101561020257610201610217565b5b828203905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b6102548161020d565b811461025f57600080fd5b5056fea264697066735822122062cca91a84d90195cd174bf9ce7cf864efc93252479096b852535063f7e92b4964736f6c63430008070033';
        let bytecodeOptimized = '0x608060405234801561001057600080fd5b50610116806100206000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c806306661abd14604b578063371303c01460655780636d4ce63c14606d578063b3bcfa82146074575b600080fd5b605360005481565b60405190815260200160405180910390f35b606b607a565b005b6000546053565b606b6091565b6001600080828254608a919060a1565b9091555050565b6001600080828254608a919060b6565b6000821982111560b15760b160ca565b500190565b60008282101560c55760c560ca565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220d78cb4047b3907a7f2dd4dab13d5542ad887714825380b6619c247a5b79565d064736f6c63430008070033'

        let bytecodes = [
            bytecodeRaw,
            bytecodeOptimized
        ];

        await alot(bytecodes)
            .forEachAsync(async bytecode => {
                const evm = new EVM(bytecode);

                await evm.prepair();

                let getOpCodes = evm.getMethodOpcodes('get()');
                let hasSStore = getOpCodes.opcodes.find(x => x.name === 'SSTORE');
                eq_(hasSStore, null);
                //console.log(getOpCodes.opcodes.map(x => x.name));

                let incOpCodes = evm.getMethodOpcodes('inc()');
                let incHasSStore = incOpCodes.opcodes.find(x => x.name === 'SSTORE');
                //console.log(incOpCodes.opcodes.map(x => x.name));
                notEq_(incHasSStore, null);
            })
            .toArrayAsync({ threads: 1 });
    }
})
